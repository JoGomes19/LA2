Tentar medir o grau de singularidade entre 2 strings
ole
folha

Quão parecidas elas são?
Quantas alterações temos de fazer a ole para obter folha
Inserção de caracter, remoção de caracter ou alteração de um caracter para outro
Neste caso temos 3 alterações, uma remoção de f, outra remoção de h e depois uma alteração de a para e
Casos base: 
- as palavras são iguais,a distancia é 0
- Se uma delas é vazia a distancia de edição é o tamanho da outra

Calcular o minimo de edição entre 2 palavras: Temos de calcular os casos todos.

def distance(p,q):
	if p =="":
		return len(q)
	if q =="":
		return len(p)
	if q[-1] == p[-1]:
		return distance(p[:-1],q[:-1])
	r = float("inf")
	r = min(r,distance(p[:-1],q[:-1]))
	r = min(r,distance(p[:-1],q))
	r = min(r,distance(p,q[:-1]))
	return r +1

Para palavras maiores fica muito lento.
Vamos melhorar com uma cache e vamos utilizar como chave uma string
Vai demorar mais tempo a testar se esta na cache do que se estivessemos a utilizar inteiros. 

Utilizamos strings como chaves
--------
cache = {}
def mdistance(p,q):
	if (p,q) in cache:
		return cache[(p,q)]
	if p =="":
		cache[(p,q)] = len(q)
		return cache[(p,q)]
	if q =="":
		cache[(p,q)] = len(p)
		return cache[(p,q)]
	if q[-1] == p[-1]:
		cache[(p,q)] = mdistance(p[:-1],q[:-1])
		return cache[(p,q)]
	r = float("inf")
	r = min(r,mdistance(p[:-1],q[:-1]))
	r = min(r,mdistance(p[:-1],q))
	r = min(r,mdistance(p,q[:-1]))
	cache[(p,q)] = r+1
	return r +1
-------

Agora vamos utiliza inteiros como chave da cache.
Temos de passar 2 inteiros que nos dizem o tamanho do prefixo das palavras a comparar 

Utilizando inteiros como chave 
--------------------
cache = {}
def imdistance(p,q,lp,lq):
	if (lp,lq) in cache:  #vemos se ja consideramos os prefixos com este tamanho 
		return cache[(lp,lq)]
	if lp ==0:
		cache[(lp,lq)] = lq
		return lq
	if lq ==0:
		cache[(lp,lq)] = lp
		return lp
	if q[lq-1] == p[lp-1]:
		cache[(lp,lq)] = imdistance(p,q,lp-1,lq-1)
		return cache[(lp,lq)]
	r = float("inf")
	r = min(r,imdistance(p,q,lp-1,lq-1))
	r = min(r,imdistance(p,q,lp-1,lq))
	r = min(r,imdistance(p,q,lp,lq-1))
	cache[(lp,lq)] = r+1
	return r +1
---------------------






