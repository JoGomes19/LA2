Queremos destrocar 23 escudos no numero minimo de moedas
Temos disponivel moedas de 1 escudo,4 escudos, 5 escudos, 15 escudos e 20 escudos 
Neste caso teriamos de dar 1 de 15 escudos e 2 de 4 escudos.

Temos de tentar todas as hipoteses de forma a ver quanto resta dar.

-----------------
def troca(v):
	if v == 0:
		return 0
	r = float("inf") # calcular o minimo de todas as hip.
	for m in moedas:
		if v >= m:
			r = min(r,troca(v-m))
	return r+1

Faz uma chamada recursiva por cada moeda em moedas, neste caso faz 5; árvore que abre de 5 em 5 (diverge em 5). Tempo de execução: 5^n
-----------------

def mtroca(v):
	if v in cache:
		return cache[v]
	if v == 0:
		cache[0] = 0
		return 0
	r = float("inf") # calcular o minimo de todas as hip.
	for m in moedas:
		if v >= m:
			r = min(r,mtroca(v-m))
	cache[v] = r+1
	return r+1

Podemos fazer melhor, pois para um numero maior ele vai dar stack overflow (muitas chamadas recursivas)
Temos de fazer agora bottom-up. Começamos no 0 e vamos ate ao valor dado 
-----------------
Versão em Programação Dinamica

def pdtroca(v):
	cache = {}
	cache[0] = 0
	for i in range(1,v+1):
		r = float("inf") # calcular o minimo de todas as hip.
		for m in moedas:
			if i >= m:
				r = min(r,cache[i-m])
		cache[i] = r+1
	return cache[v]

Podemos optimizar a cache mas a probabilidade de nos enganarmos é muito alta.
















